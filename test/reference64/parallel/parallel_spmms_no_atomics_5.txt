begin
    Ct_lvl = ((ex.bodies[1]).bodies[1]).tns.bind.lvl
    Ct_lvl_2 = Ct_lvl.lvl
    Ct_lvl_2_val = Ct_lvl_2.lvl.val
    A_lvl = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl
    A_lvl_ptr = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.ptr
    A_lvl_tbl1 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.tbl[1]
    A_lvl_tbl2 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[1]).tns.bind.lvl.tbl[2]
    A_lvl_val = A_lvl.lvl.val
    B_lvl = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl
    B_lvl_ptr = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.ptr
    B_lvl_tbl1 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.tbl[1]
    B_lvl_tbl2 = (((ex.bodies[1]).bodies[2]).body.body.body.rhs.args[2]).tns.bind.lvl.tbl[2]
    B_lvl_val = B_lvl.lvl.val
    B_lvl.shape[1] == A_lvl.shape[2] || throw(DimensionMismatch("mismatched dimension limits ($(B_lvl.shape[1]) != $(A_lvl.shape[2]))"))
    @warn "Performance Warning: non-concordant traversal of A[i, k] (hint: most arrays prefer column major or first index fast, run in fast mode to ignore this warning)"
    pos_stop = A_lvl.shape[1] * B_lvl.shape[2]
    Finch.resize_if_smaller!(Ct_lvl_2_val, pos_stop)
    Finch.fill_range!(Ct_lvl_2_val, 0x0000000000000000, 1, pos_stop)
    val = (Finch).transfer(Ct_lvl_2_val, CPU(Threads.nthreads()), Finch.ScatterSend())
    Threads.@threads for tid = 1:Threads.nthreads()
            Finch.@barrier begin
                    @inbounds @fastmath(begin
                                B_lvl_q = B_lvl_ptr[1]
                                B_lvl_q_stop = B_lvl_ptr[1 + 1]
                                if B_lvl_q < B_lvl_q_stop
                                    B_lvl_i_stop = B_lvl_tbl2[B_lvl_q_stop - 1]
                                else
                                    B_lvl_i_stop = 0
                                end
                                phase_start_2 = max(1, 1 + fld(B_lvl.shape[2] * (tid + -1), Threads.nthreads()))
                                phase_stop_2 = min(B_lvl.shape[2], B_lvl_i_stop, fld(B_lvl.shape[2] * tid, Threads.nthreads()))
                                if phase_stop_2 >= phase_start_2
                                    if B_lvl_tbl2[B_lvl_q] < phase_start_2
                                        B_lvl_q = Finch.scansearch(B_lvl_tbl2, phase_start_2, B_lvl_q, B_lvl_q_stop - 1)
                                    end
                                    while true
                                        B_lvl_i = B_lvl_tbl2[B_lvl_q]
                                        B_lvl_q_step = B_lvl_q
                                        if B_lvl_tbl2[B_lvl_q] == B_lvl_i
                                            B_lvl_q_step = Finch.scansearch(B_lvl_tbl2, B_lvl_i + 1, B_lvl_q, B_lvl_q_stop - 1)
                                        end
                                        if B_lvl_i < phase_stop_2
                                            Ct_lvl_q = (1 - 1) * B_lvl.shape[2] + B_lvl_i
                                            Threads.@threads for tid_3 = 1:Threads.nthreads()
                                                    Finch.@barrier begin
                                                            @inbounds @fastmath(begin
                                                                        phase_start_7 = max(1, 1 + fld(A_lvl.shape[1] * (-1 + tid_3), Threads.nthreads()))
                                                                        phase_stop_8 = min(A_lvl.shape[1], fld(A_lvl.shape[1] * tid_3, Threads.nthreads()))
                                                                        if phase_stop_8 >= phase_start_7
                                                                            for i_16 = phase_start_7:phase_stop_8
                                                                                Ct_lvl_2_q = (Ct_lvl_q - 1) * A_lvl.shape[1] + i_16
                                                                                A_lvl_q = A_lvl_ptr[1]
                                                                                A_lvl_q_stop = A_lvl_ptr[1 + 1]
                                                                                if A_lvl_q < A_lvl_q_stop
                                                                                    A_lvl_i_stop = A_lvl_tbl2[A_lvl_q_stop - 1]
                                                                                else
                                                                                    A_lvl_i_stop = 0
                                                                                end
                                                                                B_lvl_q_2 = B_lvl_q
                                                                                if B_lvl_q < B_lvl_q_step
                                                                                    B_lvl_i_stop_2 = B_lvl_tbl1[B_lvl_q_step - 1]
                                                                                else
                                                                                    B_lvl_i_stop_2 = 0
                                                                                end
                                                                                phase_stop_9 = min(B_lvl.shape[1], A_lvl_i_stop, B_lvl_i_stop_2)
                                                                                if phase_stop_9 >= 1
                                                                                    k = 1
                                                                                    if A_lvl_tbl2[A_lvl_q] < 1
                                                                                        A_lvl_q = Finch.scansearch(A_lvl_tbl2, 1, A_lvl_q, A_lvl_q_stop - 1)
                                                                                    end
                                                                                    if B_lvl_tbl1[B_lvl_q] < 1
                                                                                        B_lvl_q_2 = Finch.scansearch(B_lvl_tbl1, 1, B_lvl_q, B_lvl_q_step - 1)
                                                                                    end
                                                                                    while k <= phase_stop_9
                                                                                        A_lvl_i = A_lvl_tbl2[A_lvl_q]
                                                                                        A_lvl_q_step = A_lvl_q
                                                                                        if A_lvl_tbl2[A_lvl_q] == A_lvl_i
                                                                                            A_lvl_q_step = Finch.scansearch(A_lvl_tbl2, A_lvl_i + 1, A_lvl_q, A_lvl_q_stop - 1)
                                                                                        end
                                                                                        B_lvl_i_2 = B_lvl_tbl1[B_lvl_q_2]
                                                                                        phase_stop_10 = min(B_lvl_i_2, phase_stop_9, A_lvl_i)
                                                                                        if A_lvl_i == phase_stop_10 && B_lvl_i_2 == phase_stop_10
                                                                                            B_lvl_2_val = B_lvl_val[B_lvl_q_2]
                                                                                            A_lvl_q_2 = A_lvl_q
                                                                                            if A_lvl_q < A_lvl_q_step
                                                                                                A_lvl_i_stop_2 = A_lvl_tbl1[A_lvl_q_step - 1]
                                                                                            else
                                                                                                A_lvl_i_stop_2 = 0
                                                                                            end
                                                                                            phase_stop_11 = min(i_16, A_lvl_i_stop_2)
                                                                                            if phase_stop_11 >= i_16
                                                                                                if A_lvl_tbl1[A_lvl_q] < i_16
                                                                                                    A_lvl_q_2 = Finch.scansearch(A_lvl_tbl1, i_16, A_lvl_q, A_lvl_q_step - 1)
                                                                                                end
                                                                                                while true
                                                                                                    A_lvl_i_2 = A_lvl_tbl1[A_lvl_q_2]
                                                                                                    if A_lvl_i_2 < phase_stop_11
                                                                                                        A_lvl_2_val = A_lvl_val[A_lvl_q_2]
                                                                                                        Ct_lvl_2_val[Ct_lvl_2_q] = B_lvl_2_val * A_lvl_2_val + Ct_lvl_2_val[Ct_lvl_2_q]
                                                                                                        A_lvl_q_2 += 1
                                                                                                    else
                                                                                                        phase_stop_13 = min(phase_stop_11, A_lvl_i_2)
                                                                                                        if A_lvl_i_2 == phase_stop_13
                                                                                                            A_lvl_2_val = A_lvl_val[A_lvl_q_2]
                                                                                                            Ct_lvl_2_val[Ct_lvl_2_q] += B_lvl_2_val * A_lvl_2_val
                                                                                                            A_lvl_q_2 += 1
                                                                                                        end
                                                                                                        break
                                                                                                    end
                                                                                                end
                                                                                            end
                                                                                            A_lvl_q = A_lvl_q_step
                                                                                            B_lvl_q_2 += 1
                                                                                        elseif B_lvl_i_2 == phase_stop_10
                                                                                            B_lvl_q_2 += 1
                                                                                        elseif A_lvl_i == phase_stop_10
                                                                                            A_lvl_q = A_lvl_q_step
                                                                                        end
                                                                                        k = phase_stop_10 + 1
                                                                                    end
                                                                                end
                                                                            end
                                                                        end
                                                                        nothing
                                                                    end)
                                                            nothing
                                                        end
                                                end
                                            B_lvl_q = B_lvl_q_step
                                        else
                                            phase_stop_19 = min(phase_stop_2, B_lvl_i)
                                            if B_lvl_i == phase_stop_19
                                                Ct_lvl_q = (1 - 1) * B_lvl.shape[2] + phase_stop_19
                                                Threads.@threads for tid_5 = 1:Threads.nthreads()
                                                        Finch.@barrier begin
                                                                @inbounds @fastmath(begin
                                                                            phase_start_22 = max(1, 1 + fld(A_lvl.shape[1] * (-1 + tid_5), Threads.nthreads()))
                                                                            phase_stop_24 = min(A_lvl.shape[1], fld(A_lvl.shape[1] * tid_5, Threads.nthreads()))
                                                                            if phase_stop_24 >= phase_start_22
                                                                                for i_28 = phase_start_22:phase_stop_24
                                                                                    Ct_lvl_2_q_2 = (Ct_lvl_q - 1) * A_lvl.shape[1] + i_28
                                                                                    A_lvl_q_3 = A_lvl_ptr[1]
                                                                                    A_lvl_q_stop_3 = A_lvl_ptr[1 + 1]
                                                                                    if A_lvl_q_3 < A_lvl_q_stop_3
                                                                                        A_lvl_i_stop_3 = A_lvl_tbl2[A_lvl_q_stop_3 - 1]
                                                                                    else
                                                                                        A_lvl_i_stop_3 = 0
                                                                                    end
                                                                                    B_lvl_q_3 = B_lvl_q
                                                                                    if B_lvl_q < B_lvl_q_step
                                                                                        B_lvl_i_stop_3 = B_lvl_tbl1[B_lvl_q_step - 1]
                                                                                    else
                                                                                        B_lvl_i_stop_3 = 0
                                                                                    end
                                                                                    phase_stop_25 = min(B_lvl.shape[1], A_lvl_i_stop_3, B_lvl_i_stop_3)
                                                                                    if phase_stop_25 >= 1
                                                                                        k = 1
                                                                                        if A_lvl_tbl2[A_lvl_q_3] < 1
                                                                                            A_lvl_q_3 = Finch.scansearch(A_lvl_tbl2, 1, A_lvl_q_3, A_lvl_q_stop_3 - 1)
                                                                                        end
                                                                                        if B_lvl_tbl1[B_lvl_q] < 1
                                                                                            B_lvl_q_3 = Finch.scansearch(B_lvl_tbl1, 1, B_lvl_q, B_lvl_q_step - 1)
                                                                                        end
                                                                                        while k <= phase_stop_25
                                                                                            A_lvl_i_3 = A_lvl_tbl2[A_lvl_q_3]
                                                                                            A_lvl_q_step_3 = A_lvl_q_3
                                                                                            if A_lvl_tbl2[A_lvl_q_3] == A_lvl_i_3
                                                                                                A_lvl_q_step_3 = Finch.scansearch(A_lvl_tbl2, A_lvl_i_3 + 1, A_lvl_q_3, A_lvl_q_stop_3 - 1)
                                                                                            end
                                                                                            B_lvl_i_3 = B_lvl_tbl1[B_lvl_q_3]
                                                                                            phase_stop_26 = min(B_lvl_i_3, phase_stop_25, A_lvl_i_3)
                                                                                            if A_lvl_i_3 == phase_stop_26 && B_lvl_i_3 == phase_stop_26
                                                                                                B_lvl_2_val_3 = B_lvl_val[B_lvl_q_3]
                                                                                                A_lvl_q_4 = A_lvl_q_3
                                                                                                if A_lvl_q_3 < A_lvl_q_step_3
                                                                                                    A_lvl_i_stop_4 = A_lvl_tbl1[A_lvl_q_step_3 - 1]
                                                                                                else
                                                                                                    A_lvl_i_stop_4 = 0
                                                                                                end
                                                                                                phase_stop_27 = min(i_28, A_lvl_i_stop_4)
                                                                                                if phase_stop_27 >= i_28
                                                                                                    if A_lvl_tbl1[A_lvl_q_3] < i_28
                                                                                                        A_lvl_q_4 = Finch.scansearch(A_lvl_tbl1, i_28, A_lvl_q_3, A_lvl_q_step_3 - 1)
                                                                                                    end
                                                                                                    while true
                                                                                                        A_lvl_i_4 = A_lvl_tbl1[A_lvl_q_4]
                                                                                                        if A_lvl_i_4 < phase_stop_27
                                                                                                            A_lvl_2_val_2 = A_lvl_val[A_lvl_q_4]
                                                                                                            Ct_lvl_2_val[Ct_lvl_2_q_2] = B_lvl_2_val_3 * A_lvl_2_val_2 + Ct_lvl_2_val[Ct_lvl_2_q_2]
                                                                                                            A_lvl_q_4 += 1
                                                                                                        else
                                                                                                            phase_stop_29 = min(phase_stop_27, A_lvl_i_4)
                                                                                                            if A_lvl_i_4 == phase_stop_29
                                                                                                                A_lvl_2_val_2 = A_lvl_val[A_lvl_q_4]
                                                                                                                Ct_lvl_2_val[Ct_lvl_2_q_2] += B_lvl_2_val_3 * A_lvl_2_val_2
                                                                                                                A_lvl_q_4 += 1
                                                                                                            end
                                                                                                            break
                                                                                                        end
                                                                                                    end
                                                                                                end
                                                                                                A_lvl_q_3 = A_lvl_q_step_3
                                                                                                B_lvl_q_3 += 1
                                                                                            elseif B_lvl_i_3 == phase_stop_26
                                                                                                B_lvl_q_3 += 1
                                                                                            elseif A_lvl_i_3 == phase_stop_26
                                                                                                A_lvl_q_3 = A_lvl_q_step_3
                                                                                            end
                                                                                            k = phase_stop_26 + 1
                                                                                        end
                                                                                    end
                                                                                end
                                                                            end
                                                                            nothing
                                                                        end)
                                                                nothing
                                                            end
                                                    end
                                                B_lvl_q = B_lvl_q_step
                                            end
                                            break
                                        end
                                    end
                                end
                                nothing
                            end)
                    nothing
                end
        end
    val_18 = (Finch).transfer(val, CPU(Threads.nthreads()), Finch.GatherRecv())
    resize!(val_18, A_lvl.shape[1] * B_lvl.shape[2])
    (Ct = Tensor((DenseLevel){Int64}((DenseLevel){Int64}(ElementLevel{0x0000000000000000, UInt64, Int64}(val_18), A_lvl.shape[1]), B_lvl.shape[2])),)
end
